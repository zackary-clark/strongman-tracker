extend type Query {
    workouts: [Workout!]!
    workout(input: SingleWorkoutInput!): Workout
}

extend type Mutation {
    addWorkout(input: AddWorkoutInput!): AddWorkoutPayload
    addLift(input: AddLiftInput!): AddLiftPayload
    deleteWorkout(input: DeleteWorkoutInput!): DeleteWorkoutPayload
    deleteLift(input: DeleteLiftInput!): DeleteLiftPayload
}

type Workout {
    id: ID!
    date: Date!
    lifts: [Lift!]!
}

type Lift {
    id: ID!
    name: String!
    reps: Int!
    sets: Int!
    weight: Int!
}

input SingleWorkoutInput {
    id: ID!
}

input AddWorkoutInput {
    date: Date!
}

type AddWorkoutPayload implements MutationPayload {
    success: Boolean!
    workout: Workout
}

input AddLiftInput {
    workout: ID!
    name: String!
    reps: Int!
    sets: Int!
    weight: Int!
}

type AddLiftPayload implements MutationPayload {
    success: Boolean!
    lift: Lift
    workout: ID
}

input DeleteWorkoutInput {
    id: ID!
}

type DeleteWorkoutPayload implements DeletePayload {
    success: Boolean!
    id: ID!
}

input DeleteLiftInput {
    id: ID!
}

type DeleteLiftPayload implements DeletePayload {
    success: Boolean!
    id: ID!
}
